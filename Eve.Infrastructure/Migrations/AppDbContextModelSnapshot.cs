// <auto-generated />
using System;
using Eve.Infrastructure.DataBase.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eve.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eve.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_groups_category_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_groups_name");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.IconEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id")
                        .HasName("pk_icons");

                    b.ToTable("icons", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.MarketGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HasTypes")
                        .HasColumnType("boolean")
                        .HasColumnName("has_types");

                    b.Property<int?>("IconId")
                        .HasColumnType("integer")
                        .HasColumnName("icon_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_group_id");

                    b.HasKey("Id")
                        .HasName("pk_market_groups");

                    b.HasIndex("IconId")
                        .HasDatabaseName("ix_market_groups_icon_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_market_groups_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_market_groups_parent_group_id");

                    b.ToTable("market_groups", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.NameEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_names");

                    b.ToTable("names", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int>("BlueprintId")
                        .HasColumnType("integer")
                        .HasColumnName("blueprint_id");

                    b.Property<int>("MaxProductionLimit")
                        .HasColumnType("integer")
                        .HasColumnName("max_production_limit");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductMaterialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_production_materials");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_materials_product_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_production_materials_type_id");

                    b.ToTable("production_materials", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductSkillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_production_skills");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_skills_product_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_production_skills_type_id");

                    b.ToTable("production_skills", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.ReprocessMaterialEntity", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("TypeId", "MaterialId")
                        .HasName("pk_reprocess_materials");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("ix_reprocess_materials_material_id");

                    b.ToTable("reprocess_materials", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.StationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstellationId")
                        .HasColumnType("integer")
                        .HasColumnName("constellation_id");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("integer")
                        .HasColumnName("corporation_id");

                    b.Property<float?>("DockingCostPerVolume")
                        .HasColumnType("real")
                        .HasColumnName("docking_cost_per_volume");

                    b.Property<int?>("MaxShipVolumeDockable")
                        .HasColumnType("integer")
                        .HasColumnName("max_ship_volume_dockable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OfficeRentalCost")
                        .HasColumnType("integer")
                        .HasColumnName("office_rental_cost");

                    b.Property<int?>("OperationID")
                        .HasColumnType("integer")
                        .HasColumnName("operation_id");

                    b.Property<int>("RegionID")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<float?>("ReprocessingEfficiency")
                        .HasColumnType("real")
                        .HasColumnName("reprocessing_efficiency");

                    b.Property<int?>("ReprocessingHangarFlag")
                        .HasColumnType("integer")
                        .HasColumnName("reprocessing_hangar_flag");

                    b.Property<float?>("ReprocessingStationsTake")
                        .HasColumnType("real")
                        .HasColumnName("reprocessing_station_take");

                    b.Property<double?>("Security")
                        .HasColumnType("double precision")
                        .HasColumnName("security");

                    b.Property<int>("SolarSystemID")
                        .HasColumnType("integer")
                        .HasColumnName("solar_system_id");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_stations");

                    b.HasIndex("ConstellationId")
                        .HasDatabaseName("ix_stations_constellation_id");

                    b.HasIndex("RegionID")
                        .HasDatabaseName("ix_stations_region_id");

                    b.HasIndex("SolarSystemID")
                        .HasDatabaseName("ix_stations_solar_system_id");

                    b.HasIndex("TypeID")
                        .HasDatabaseName("ix_stations_type_id");

                    b.ToTable("stations", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.TypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<float?>("Capacity")
                        .HasColumnType("real")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int?>("IconId")
                        .HasColumnType("integer")
                        .HasColumnName("icon_id");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("boolean")
                        .HasColumnName("is_product");

                    b.Property<int?>("MarketGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("market_group_id");

                    b.Property<float?>("Mass")
                        .HasColumnType("real")
                        .HasColumnName("mass");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.Property<float?>("PackagedVolume")
                        .HasColumnType("real")
                        .HasColumnName("packaged_volume");

                    b.Property<int?>("PortionSize")
                        .HasColumnType("integer")
                        .HasColumnName("portion_size");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<float?>("Radius")
                        .HasColumnType("real")
                        .HasColumnName("radius");

                    b.Property<float?>("Volume")
                        .HasColumnType("real")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_types");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_types_group_id");

                    b.HasIndex("IconId")
                        .HasDatabaseName("ix_types_icon_id");

                    b.HasIndex("MarketGroupId")
                        .HasDatabaseName("ix_types_market_group_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_types_name");

                    b.ToTable("types", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.ConstellationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("integer")
                        .HasColumnName("name_id");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_constellations");

                    b.HasIndex("NameId")
                        .HasDatabaseName("ix_constellations_name_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_constellations_region_id");

                    b.ToTable("constellations", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NameId")
                        .HasColumnType("integer")
                        .HasColumnName("name_id");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.HasIndex("NameId")
                        .HasDatabaseName("ix_regions_name_id");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.SolarSystemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstellationId")
                        .HasColumnType("integer")
                        .HasColumnName("constellation_id");

                    b.Property<bool>("IsHub")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hub");

                    b.Property<int>("NameId")
                        .HasColumnType("integer")
                        .HasColumnName("name_id");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<float>("SecurityStatus")
                        .HasColumnType("real")
                        .HasColumnName("security_status");

                    b.HasKey("Id")
                        .HasName("pk_solar_systems");

                    b.HasIndex("ConstellationId")
                        .HasDatabaseName("ix_solar_systems_constellation_id");

                    b.HasIndex("NameId")
                        .HasDatabaseName("ix_solar_systems_name_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_solar_systems_region_id");

                    b.ToTable("solar_systems", (string)null);
                });

            modelBuilder.Entity("Eve.Domain.Entities.GroupEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.CategoryEntity", "Category")
                        .WithMany("Groups")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_groups_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Eve.Domain.Entities.MarketGroupEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.IconEntity", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .HasConstraintName("fk_market_groups_icons_icon_id");

                    b.HasOne("Eve.Domain.Entities.MarketGroupEntity", "ParentGroup")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_market_groups_market_groups_parent_group_id");

                    b.Navigation("Icon");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Type")
                        .WithOne("Product")
                        .HasForeignKey("Eve.Domain.Entities.Products.ProductEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductMaterialEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.Products.ProductEntity", "Product")
                        .WithMany("Materials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_production_materials_products_product_id");

                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_production_materials_types_type_id");

                    b.Navigation("Product");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductSkillEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.Products.ProductEntity", "Product")
                        .WithMany("Skills")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_production_skills_products_product_id");

                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_production_skills_types_type_id");

                    b.Navigation("Product");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Eve.Domain.Entities.ReprocessMaterialEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reprocess_materials_types_material_id");

                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Type")
                        .WithMany("ReprocessComponents")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reprocess_materials_types_type_id");

                    b.Navigation("Material");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Eve.Domain.Entities.StationEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.Universe.ConstellationEntity", "Constellation")
                        .WithMany()
                        .HasForeignKey("ConstellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_constellations_constellation_id");

                    b.HasOne("Eve.Domain.Entities.Universe.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_regions_region_id");

                    b.HasOne("Eve.Domain.Entities.Universe.SolarSystemEntity", "SolarSystem")
                        .WithMany()
                        .HasForeignKey("SolarSystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_solar_systems_solar_system_id");

                    b.HasOne("Eve.Domain.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_types_type_id");

                    b.Navigation("Constellation");

                    b.Navigation("Region");

                    b.Navigation("SolarSystem");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Eve.Domain.Entities.TypeEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.GroupEntity", "Group")
                        .WithMany("Types")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_types_groups_group_id");

                    b.HasOne("Eve.Domain.Entities.IconEntity", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .HasConstraintName("fk_types_icons_icon_id");

                    b.HasOne("Eve.Domain.Entities.MarketGroupEntity", "MarketGroup")
                        .WithMany("Types")
                        .HasForeignKey("MarketGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_types_market_groups_market_group_id");

                    b.Navigation("Group");

                    b.Navigation("Icon");

                    b.Navigation("MarketGroup");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.ConstellationEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.NameEntity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_constellations_names_name_id");

                    b.HasOne("Eve.Domain.Entities.Universe.RegionEntity", "Region")
                        .WithMany("Constellations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_constellations_regions_region_id");

                    b.Navigation("Name");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.RegionEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.NameEntity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regions_names_name_id");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.SolarSystemEntity", b =>
                {
                    b.HasOne("Eve.Domain.Entities.Universe.ConstellationEntity", "Constellation")
                        .WithMany("SolarSystems")
                        .HasForeignKey("ConstellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solar_systems_constellations_constellation_id");

                    b.HasOne("Eve.Domain.Entities.NameEntity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solar_systems_names_name_id");

                    b.HasOne("Eve.Domain.Entities.Universe.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solar_systems_regions_region_id");

                    b.Navigation("Constellation");

                    b.Navigation("Name");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Eve.Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Eve.Domain.Entities.GroupEntity", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Eve.Domain.Entities.MarketGroupEntity", b =>
                {
                    b.Navigation("ChildGroups");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Products.ProductEntity", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Eve.Domain.Entities.TypeEntity", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();

                    b.Navigation("ReprocessComponents");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.ConstellationEntity", b =>
                {
                    b.Navigation("SolarSystems");
                });

            modelBuilder.Entity("Eve.Domain.Entities.Universe.RegionEntity", b =>
                {
                    b.Navigation("Constellations");
                });
#pragma warning restore 612, 618
        }
    }
}
